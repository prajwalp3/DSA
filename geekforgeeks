👌👌👌👌👌👌👌👌
Example 1:Given and integer N.Calculate the sum of series 13 + 23 + 33 + 43 + … till N-th term.
Example 1:
Input:
N=5
Output:
225
Explanation:
13+23+33+43+53=225
1.👍👍👍👍👍👍
ans:my code
//geekforgeeks
//{ Driver Code Starts
// Initial template for C++
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function template for C++

class Solution {
  public:
    long long sumOfSeries(long long N) {
       long long sum=0;
       long long a= sumfunc(sum, N);
       return a;
    }
   long long sumfunc(long long sum,long long N){
         if(N==0)
         {
         return sum; 
         }
         sum=sumfunc(sum,N-1);
         sum=(N*N*N)+sum;
         return sum;
     }
    
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        long long N;
        cin >> N;
        Solution ob;
        cout << ob.sumOfSeries(N) << "\n";
    }
}
// } Driver Code Ends
2.👍👍👍👍👍👍
///solution second 
smart solution
class Solution {
  public:
    long long sumOfSeries(long long N) {
          if(N == 1){
            return 1; 
        }
        long long prev = sumOfSeries(N-1);
        long long now = (N*N*N) + prev;
        return now;
    }
   
    };
Functional Recursion is used here. like,

f(3)--->
3*3*3+f(2)--->
3*3*3+2*2*2+f(1)--->
3*3*3+2*2*2+1*1*1+f(0)
3*3*3+2*2*2+1*1*1+0 = 36

class Solution {
  public:
  long long sum=0;
    long long sumOfSeries(long long N) {
            // code here
        if(N<=0)
        return sum;
        long long cube = N*N*N;
        sum=sum+cube;
        sumOfSeries(N-1);
        return sum;
    }

//////
long long sumOfSeries(long long N) {
        // code here
        if(N<1){
            return 0;
        }
        long long cube=N*N*N;
        cube+=sumOfSeries(N-1);
        return cube;
    }
///////
preranakhandekar123
1 week ago

class Solution {
    long sumOfSeries(long N) {
        if(N<=0){
            return 0;
        }
     return sumOfSeries(N-1)+N*N*N;
    }
}
/////

niha_lraj
2 weeks ago

// User function template for C++
2 sec 

class Solution {
  public:
  long c=0,d; 
long long sumOfSeries(long long N) {
         if(N==0){
            return c;
        } 
        d=N*N*N;
        c=c+d;
        sumOfSeries(N-1);
        }
};
//////
 class Solution {
  public:
  long c=0,d;
  void sum(long a,long N){
      if(a<1){
          return;
      }
      sum(a-1,N);
      d=(a)*(a)*(a);
      c=c+d;
      
      
  }
    long long sumOfSeries(long long N) {
        // code here
        sum(N,N);
        return c;
    }
};
/////////
class Solution {
  public:
    long long sumOfSeries(long long N) {
        // code here
        if(N==1)
        return 1;
        return N*N*N + sumOfSeries(N-1);
    }
};
///////
C++ solution

class Solution {
  public:
    long long sum =0;
    long long i = 1;
    long long sumOfSeries(long long N) {
        if(i>N) return sum;
        
        sum += i*i*i;
        i++;
        sumOfSeries(N);
    }
};//////
Here is the best cpp solution--->

sum = (N * (N + 1) / 2); // Calculate the sum of numbers from 1 to N
return sum * sum;   // the square of the sum of the series from 1 to N always returns the sum of cubes
////////
PARAMETERISED RECURSION
class Solution {
    private:
    long long helper(long long i, long long N, long long sum){
        
        if(N==0) return sum;
        
        long long ans=i*i*i;
        sum+=ans;
        
        return helper(i+1,N-1,sum);
    }
  public:
    long long sumOfSeries(long long N) {
        // code here
         helper(1, N, 0);
    }
};
//////
Best sollution 

class Solution {
  public:
    long long sumOfSeries(long long N) {
        // code here
      if(N==0)
      {
          return 0;
      }
      else
      {
          return N*N*N + sumOfSeries(N-1);
      }
    }
};
